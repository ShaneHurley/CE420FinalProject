# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vZZVEugNHpLvzhM661OOLhGG_KJe2WdW
"""

import requests
import json

# Base URL for Open-Meteo API
BASE_URL = "https://api.open-meteo.com/v1"

def celsius_to_fahrenheit(celsius):
    return round(celsius * 9/5 + 32,1)

def get_current_temperature(latitude, longitude):
    endpoint = f"{BASE_URL}/forecast"
    params = {
        "latitude": latitude,
        "longitude": longitude,
        "current_weather": True
    }
    response = requests.get(endpoint, params=params)
    data = response.json()
    temp_c = data["current_weather"]["temperature"]
    return celsius_to_fahrenheit(temp_c)

def get_weekly_forecast(latitude, longitude):
    endpoint = f"{BASE_URL}/forecast"
    params = {
        "latitude": latitude,
        "longitude": longitude,
        "daily": "temperature_2m_max,temperature_2m_min,precipitation_sum",
        "timezone": "auto"
    }
    response = requests.get(endpoint, params=params)
    data = response.json()
    forecast = []
    for day, max_temp, min_temp, precip in zip(
            data["daily"]["time"],
            data["daily"]["temperature_2m_max"],
            data["daily"]["temperature_2m_min"],
            data["daily"]["precipitation_sum"]):
        forecast.append({
            "date": day,
            "max_temp": celsius_to_fahrenheit(max_temp),
            "min_temp": celsius_to_fahrenheit(min_temp),
            "precipitation": precip
        })
    return forecast

def get_historical_data(latitude, longitude, past_days=7):
    endpoint = f"{BASE_URL}/forecast"
    params = {
        "latitude": latitude,
        "longitude": longitude,
        "past_days": past_days,
        "daily": "temperature_2m_max,temperature_2m_min,precipitation_sum",
        "timezone": "auto"
    }
    response = requests.get(endpoint, params=params)
    data = response.json()
    historical_data = []
    for day, max_temp, min_temp, precip in zip(
            data["daily"]["time"],
            data["daily"]["temperature_2m_max"],
            data["daily"]["temperature_2m_min"],
            data["daily"]["precipitation_sum"]):
        historical_data.append({
            "date": day,
            "max_temp": celsius_to_fahrenheit(max_temp),
            "min_temp": celsius_to_fahrenheit(min_temp),
            "precipitation": precip
        })
    return historical_data

def get_weather_data(latitude, longitude):
    weather_data = {
        "Location": {
            "latitude":latitude,
            "longitude":longitude
        },
        "current_temperature": get_current_temperature(latitude, longitude),
        "weekly_forecast": get_weekly_forecast(latitude, longitude),
        "historical_precipitation": get_historical_data(latitude, longitude)
    }
    return weather_data

g = geocoder.ip('me')
if g.latlng is not None:
      latitude, longitude = g.latlng
      print(f"Detected location: Latitude {latitude}, Longitude {longitude}")
      weather_data = get_weather_data(latitude, longitude)
      #with open("weather_data.json", "w") as file:
      #  json.dump(weather_data, file, indent=4)
      print(json.dumps(weather_data, indent=4))
else:
    print("Unable to detect location. Please try again.")

